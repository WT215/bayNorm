#load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_ssf_005.RData")
#load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_005.RData")
#
#load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_ssf_01.RData")
load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_01.RData")

########fold change#########
source("E:/RNAseqProject/TSTAT_140817.r")
source("E:/RNAseqProject/MANY_DE_FUN.R")
source("E:/RNAseqProject/MANY_NORM_FUN.R")


load("E:/RNAseqProject/Bacher__SCnorm_2016/RAW_INITIATE.RData")
library(bayNorm)
#system.time(BAY_H1<-bayNorm(Data=H1_data_comb,BETA_vec=Beta_H1,S=20,parallel=T,NCores=5,FIX_MU = T,GR=F,Conditions=CONDITION_H1,BB_SIZE = T,mode_version = F,UMI_sffl=c(100,50),Prior_type = 'GG',verbose = T))


#load saver
load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_01/saver/SAVER_H1.RData")


H1_data_comb<-cbind(H1_p24,H1_p96)[whichg_H1,]

# Conditional median over all cells.
Inputdat<-H1_data_comb
summary(colSums(H1_data_comb[,CONDITION_H1==1]))
summary(colSums(H1_data_comb[,CONDITION_H1==2]))



MedExp <- log(apply(Inputdat, 1, function(x) median(x[x != 0])))
# split into 4 equally sized groups:
grpnum <- 4
splitby <- sort(MedExp)
grps <- length(splitby)/grpnum
sreg <- split(splitby, ceiling(seq_along(splitby)/grps))

CONDITION=CONDITION_H1

#######begin many plots########



#######Figure 2a############

#logfold='My'
logfold='SCnorm'

if(logfold=='My'){

  # For Figure 2a:
  fc_SCnorm <- apply(log2(scnorm_out_H1@metadata$NormalizedData[whichg_H1,CONDITION==1]+1), 1, function(x) mean((x[x!=0]))) - apply(log2(scnorm_out_H1@metadata$NormalizedData[whichg_H1,CONDITION==2]+1), 1, function(x) mean((x[x!=0])))

  fc_bayNorm <- apply(log2(Bay_H1[,CONDITION==1,1]+1), 1, function(x) mean((x[x!=0]))) - apply(log2(Bay_H1[whichg_H1,CONDITION==2,1]+1), 1, function(x) mean((x[x!=0])))


  fc_scran <- apply(log2(scran_out$counts[,CONDITION==1]+1), 1, function(x) mean((x[x!=0]))) - apply(log2(scran_out$counts[whichg_H1,CONDITION==2]+1), 1, function(x) mean((x[x!=0])))

  fc_deseq <- apply(log2(deseq_out$counts[,CONDITION==1]+1), 1, function(x) mean((x[x!=0]))) - apply(log2(deseq_out$counts[whichg_H1,CONDITION==2]+1), 1, function(x) mean((x[x!=0])))


  fc_rpm <- apply(log2(rpm_out$counts[,CONDITION==1]+1), 1, function(x) mean((x[x!=0]))) - apply(log2(rpm_out$counts[whichg_H1,CONDITION==2]+1), 1, function(x) mean((x[x!=0])))


  fc_tmm<- apply(log2(tmm_out$counts[,CONDITION==1]+1), 1, function(x) mean((x[x!=0]))) - apply(log2(tmm_out$counts[whichg_H1,CONDITION==2]+1), 1, function(x) mean((x[x!=0])))

  fc_list<-list(fc_bayNorm=fc_bayNorm,fc_SCnorm=fc_SCnorm,fc_scran=fc_scran,fc_rpm=fc_rpm,fc_tmm=fc_tmm,fc_deseq=fc_deseq)
} else if (logfold=='SCnorm')
{


  #######
  #SCnorm's definition for log fold change

  fc_SCnorm <- apply(scnorm_out_H1@metadata$NormalizedData[whichg_H1,CONDITION==1], 1, function(x) mean((x[x!=0]))) / apply(scnorm_out_H1@metadata$NormalizedData[whichg_H1,CONDITION==2], 1, function(x) mean((x[x!=0])))

  fc_bayNorm <- apply(Bay_H1[whichg_H1,CONDITION==1,1], 1, function(x) mean((x[x!=0]))) / apply(Bay_H1[whichg_H1,CONDITION==2,1], 1, function(x) mean((x[x!=0])))

  fc_saver <- apply(saver_scnorm$estimate[whichg_H1,CONDITION==1], 1, function(x) mean((x[x!=0]))) / apply(saver_scnorm$estimate[whichg_H1,CONDITION==2], 1, function(x) mean((x[x!=0])))

  fc_scran <- apply(scran_out$counts[whichg_H1,CONDITION==1], 1, function(x) mean((x[x!=0]))) / apply(scran_out$counts[whichg_H1,CONDITION==2], 1, function(x) mean((x[x!=0])))

  fc_deseq <- apply(deseq_out$counts[whichg_H1,CONDITION==1], 1, function(x) mean((x[x!=0]))) / apply(deseq_out$counts[whichg_H1,CONDITION==2], 1, function(x) mean((x[x!=0])))

  fc_rpm <- apply(rpm_out$counts[whichg_H1,CONDITION==1], 1, function(x) mean((x[x!=0]))) / apply(rpm_out$counts[whichg_H1,CONDITION==2], 1, function(x) mean((x[x!=0])))

  fc_tmm <- apply(tmm_out$counts[whichg_H1,CONDITION==1], 1, function(x) mean((x[x!=0]))) / apply(tmm_out$counts[whichg_H1,CONDITION==2], 1, function(x) mean((x[x!=0])))

  fc_SCnorm<-log2(fc_SCnorm)
  fc_bayNorm<-log2(fc_bayNorm)
  fc_saver<-log2(fc_saver)
  fc_scran<-log2(fc_scran)
  fc_deseq<-log2(fc_deseq)
  fc_rpm<-log2(fc_rpm)
  fc_tmm<-log2(fc_tmm)

  fc_list<-list(bayNorm=fc_bayNorm,SAVER=fc_saver,SCnorm=fc_SCnorm,scran=fc_scran,RPM=fc_rpm,TMM=fc_tmm,DESeq=fc_deseq)
}


library(foreach)
Bar_data<-foreach(i=1:length(sreg),.combine=rbind)%:%

  foreach(j = 1:length(fc_list),.combine=rbind)%do%{
    qq<-cbind( fc_list[[j]][names(sreg[[i]])],rep(i,length(fc_list[[j]][names(sreg[[i]])])),rep(names(fc_list)[j],length(fc_list[[j]][names(sreg[[i]])])))

    return(qq)
  }
Bar_data<-as.data.frame(Bar_data)

colnames(Bar_data)<-c('fc','Group','Method')
Bar_data$fc<-as.numeric(as.character(Bar_data$fc))

Bar_data$Group<-factor(Bar_data$Group,levels=unique(Bar_data$Group))
Bar_data$Method<-factor(Bar_data$Method,levels=unique(Bar_data$Method))




library(ggplot2)
textsize<-60
FC_H1<-ggplot(data=Bar_data, aes(x=Bar_data$Group, y=Bar_data$fc, fill=Bar_data$Method)) +
  geom_boxplot(size=2)+
  labs(x = "Expression group",y='Log2 Fold-Change',fill='Normalization methods')+ggtitle("H1") +
  geom_hline(aes(yintercept=0),size=1)+
  scale_fill_brewer(palette="Paired")+
  theme(legend.text = element_text(size = textsize),legend.title  = element_text(size = textsize),plot.title = element_text(size = textsize),axis.title = element_text(size = textsize),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        panel.background = element_blank(), axis.line = element_line(colour = "black"),plot.subtitle = element_text(size = textsize),plot.caption =  element_text(size = textsize),axis.text=element_text(size=textsize) ,legend.key.size = unit(3,"line"))

jpeg("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/SCnorm_FINAL/FC_H1.jpeg", width = 40, height = 30, units = 'in', res = 300)
#pdf("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_01/FC_H1.jpeg", width = 55, height = 30)
FC_H1
dev.off()
#######figure 2b in SCnorm paper###########




#MAST no need to run again
R_SCnormMAST_bay<-SCnorm_runMAST(Data=cbind(Bay_H1[,CONDITION_H1==1,1],Bay_H1[,CONDITION_H1==2,1]),NumCells=c(92,92))

R_SCnormMAST_saver<-SCnorm_runMAST(Data=saver_scnorm$estimate,NumCells=c(92,92))

R_SCnormMAST_scnorm<-SCnorm_runMAST(Data=scnorm_out_H1@metadata$NormalizedData[whichg_H1,],NumCells=c(92,92))
R_SCnormMAST_scran<-SCnorm_runMAST(Data=scran_out$counts,NumCells=c(92,92))
R_SCnormMAST_rpm<-SCnorm_runMAST(Data=rpm_out$counts,NumCells=c(92,92))
R_SCnormMAST_tmm<-SCnorm_runMAST(Data=tmm_out$counts,NumCells=c(92,92))
R_SCnormMAST_deseq<-SCnorm_runMAST(Data=deseq_out$counts,NumCells=c(92,92))


#save(R_SCnormMAST_bay,R_SCnormMAST_saver,R_SCnormMAST_scnorm,R_SCnormMAST_scran,R_SCnormMAST_rpm,R_SCnormMAST_tmm,R_SCnormMAST_deseq,file="E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_01/mast_othernorm.RData")
load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_01/mast_othernorm.RData")
#MAST_LIST #TSTAT_LIST
load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_01/mast_othernorm.RData")
#load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_01/tstat_esf_01.RData")
load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_01/MAST_bay_mat.RData")
MAST_bay_median<-apply(MAST_bay_mat,1,median)


#save(tstat_bay,tstat_saver,tstat_scnorm,tstat_scran,tstat_tmm,tstat_rpm,tstat_deseq,tstat_bay2,tstat_saver2,tstat_scnorm2,tstat_scran2,tstat_tmm2,tstat_rpm2,tstat_deseq2,file="E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_01/tstat_othernorm.RData")
load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_01/tstat_othernorm.RData")

#######wilcox.test, no need to run again
system.time(tstat_bay<-tStatAnalysis_2groups_2(cells=Bay_H1[,CONDITION_H1==1,],ctrls=Bay_H1[,CONDITION_H1==2,], list_mode=NULL, verbose=T, plotFDR = FALSE))

system.time(tstat_saver<-tStatAnalysis_2groups_2(cells=saver_scnorm$estimate[,CONDITION_H1==1],ctrls=saver_scnorm$estimate[,CONDITION_H1==2], list_mode=NULL, verbose=T, plotFDR = FALSE))

system.time(tstat_scnorm<-tStatAnalysis_2groups_2(cells=scnorm_out_H1@metadata$NormalizedData[,CONDITION_H1==1],ctrls=scnorm_out_H1@metadata$NormalizedData[,CONDITION_H1==2], list_mode=NULL, verbose=T, plotFDR = FALSE))

system.time(tstat_scran<-tStatAnalysis_2groups_2(cells=scran_out$counts[,CONDITION_H1==1],ctrls=scran_out$counts[,CONDITION_H1==2], list_mode=NULL, verbose=T, plotFDR = FALSE))

system.time(tstat_tmm<-tStatAnalysis_2groups_2(cells=tmm_out$counts[,CONDITION_H1==1],ctrls=tmm_out$counts[,CONDITION_H1==2], list_mode=NULL, verbose=T, plotFDR = FALSE))


system.time(tstat_rpm<-tStatAnalysis_2groups_2(cells=rpm_out$counts[,CONDITION_H1==1],ctrls=rpm_out$counts[,CONDITION_H1==2], list_mode=NULL, verbose=T, plotFDR = FALSE))


system.time(tstat_deseq<-tStatAnalysis_2groups_2(cells=deseq_out$counts[,CONDITION_H1==1],ctrls=deseq_out$counts[,CONDITION_H1==2], list_mode=NULL, verbose=T, plotFDR = FALSE))





###wilcox.test load result and start from here
#TFDR 2, PValue 3, PVAL_fdr 5
metric<-5

tstat_bay2<-do.call(cbind,lapply(tstat_bay,function(x){return(x[[metric]])}))
tstat_bay2<-apply(tstat_bay2,1,median)


tstat_saver2<-do.call(cbind,lapply(tstat_saver,function(x){return(x[[metric]])}))
tstat_saver2<-apply(tstat_saver2,1,median)
names(tstat_saver2)<-names(tstat_bay2)


tstat_scnorm2<-do.call(cbind,lapply(tstat_scnorm,function(x){return(x[[metric]])}))
tstat_scnorm2<-apply(tstat_scnorm2,1,median)
names(tstat_scnorm2)<-names(tstat_bay2)

tstat_tmm2<-do.call(cbind,lapply(tstat_tmm,function(x){return(x[[metric]])}))
tstat_tmm2<-apply(tstat_tmm2,1,median)
names(tstat_tmm2)<-names(tstat_bay2)

tstat_rpm2<-do.call(cbind,lapply(tstat_rpm,function(x){return(x[[metric]])}))
tstat_rpm2<-apply(tstat_rpm2,1,median)
names(tstat_rpm2)<-names(tstat_bay2)

tstat_scran2<-do.call(cbind,lapply(tstat_scran,function(x){return(x[[metric]])}))
tstat_scran2<-apply(tstat_scran2,1,median)
names(tstat_scran2)<-names(tstat_bay2)

tstat_deseq2<-do.call(cbind,lapply(tstat_deseq,function(x){return(x[[metric]])}))
tstat_deseq2<-apply(tstat_deseq2,1,median)
names(tstat_deseq2)<-names(tstat_bay2)

reee='MAST'
reee='TSTAT'


if(reee=='MAST'){
  INPUT_LIST_temp<-list(R_MAST_bay_adj=MAST_bay_median,R_MAST_saver_adj=R_SCnormMAST_saver$adjpval,R_MAST_scnorm_adj=R_SCnormMAST_scnorm$adjpval,R_MAST_scran_adj=R_SCnormMAST_scran$adjpval,R_MAST_rpm_adj=R_SCnormMAST_rpm$adjpval,R_SCnormMAST_tmm_adj=R_SCnormMAST_tmm$adjpval,R_MAST_deseq_adj=R_SCnormMAST_deseq$adjpval)
}else if (reee=='TSTAT'){
  INPUT_LIST_temp<-list(TSTAT_bay=tstat_bay2,TSTAT_saver=tstat_saver2,TSTAT_scnorm=tstat_scnorm2,TSTAT_scran=tstat_scran2,TSTAT_rpm=tstat_rpm2,TSTAT_tmm=tstat_tmm2,TSTAT_deseq=tstat_deseq2)

}
INPUT_LIST<-INPUT_LIST_temp
names(INPUT_LIST)<-names(INPUT_LIST_temp)

Gene_exp_gr<-seq(1,4)

library(foreach)
thres<-0.05

norm_vec<-c('bayNorm','SAVER','SCnorm','scran','RPM','TMM','DESeq')
BAR_MAST_l_list<-foreach(i=1:length(sreg))%do%{
  BAR_MAST_l<-lapply(INPUT_LIST,function(x){length(intersect(names(which(x<thres)),names(sreg[[i]])))})
  #BAR_MAST_l<-lapply(INPUT_LIST,function(x){length(intersect(names(which(x[,4]<thres)),names(sreg[[i]])))})

  return(BAR_MAST_l)

}

BAR_MAST_DAT<-foreach(i=1:length(BAR_MAST_l_list),.combine=rbind)%:%
  foreach(j=1:length(INPUT_LIST),.combine=rbind)%do%{
    temp<-BAR_MAST_l_list[[i]][[j]]
    temp<-c(temp,norm_vec[j],Gene_exp_gr[i])
    return(temp)
  }


BAR_MAST_DAT<-as.data.frame(BAR_MAST_DAT)
colnames(BAR_MAST_DAT)<-c('Number of detected DE genes','Normalization methods','Gene expression group')
BAR_MAST_DAT[,1]<-as.numeric(as.character(BAR_MAST_DAT[,1]))
BAR_MAST_DAT[,3]<-factor(BAR_MAST_DAT[,3],levels=unique(BAR_MAST_DAT[,3]))
BAR_MAST_DAT[,2]<-factor(BAR_MAST_DAT[,2],levels=unique(BAR_MAST_DAT[,2]))


textsize<-50
DE_H1<-ggplot(data=BAR_MAST_DAT, aes(x=BAR_MAST_DAT[,3], y=BAR_MAST_DAT[,1], fill=BAR_MAST_DAT[,2])) +
  geom_bar(stat="identity", position = position_dodge(0.9),width=0.9)+
  geom_text(aes(label=BAR_MAST_DAT[,1]), vjust=1.6, color="black", position = position_dodge(0.9), size=20)+
  labs(x = "Gene expression group",y='Number of detected DE genes',fill='Normalization methods')+ggtitle("") +
  scale_fill_brewer(palette="Paired")+
  theme(legend.text = element_text(size = textsize),legend.title  = element_text(size = textsize),plot.title = element_text(size = textsize),axis.title = element_text(size = textsize),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        panel.background = element_blank(), axis.line = element_line(colour = "black"),plot.subtitle = element_text(size = textsize),plot.caption =  element_text(size = textsize),axis.text=element_text(size=textsize) ,legend.key.size = unit(3,"line"))
#dev.off()

jpeg("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/SCnorm_FINAL/Wsaver_H1.jpeg", width = 40, height = 30, units = 'in', res = 300)
#pdf("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_01/DE_H1.jpeg", width = 55, height = 30)
DE_H1
dev.off()

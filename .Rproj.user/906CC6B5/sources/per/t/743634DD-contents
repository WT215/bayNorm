load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/meanBay/H1_BAY_esf_01.RData")
load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/meanBay/H1_RB_norm.RData")
load("E:/RNAseqProject/Bacher__SCnorm_2016/RAW_INITIATE.RData")
load("E:/RNAseqProject/Bacher__SCnorm_2016/scImpute/scImpute_H1_results.RData")
load('E:/RNAseqProject/Bacher__SCnorm_2016/SCnorm/scnorm_out_H1.RData')
load("E:/RNAseqProject/MAGIC_tr/MAGIC_H1_tr.RData")
load("E:/RNAseqProject/RAW_REAL/DCA_norm/DCA_H1/DCA_H1.RData")
#M_magic_H1<-SCnorm_runMAST(Data=MAGIC_H1,NumCells=c(92,92))


source("E:/RNAseqProject/TSTAT_140817.r")
source("E:/RNAseqProject/MANY_DE_FUN.R")
source("E:/RNAseqProject/MANY_NORM_FUN.R")


# scimpute_fun(Data=H1_data_comb[,seq(1,92)],Data_name='scImpute_H1_p24')
#
# scimpute_fun(Data=H1_data_comb[,-seq(1,92)],Data_name='scImpute_H1_p96')
#
# scImpute_H1<-readRDS(file="C:/Users/Wenhao/Documents/scImpute_H1scimpute_count.rds")
#
# scImpute_H1_p24<-readRDS(file="C:/Users/Wenhao/Documents/scImpute_H1_p24scimpute_count.rds")
# scImpute_H1_p96<-readRDS(file="C:/Users/Wenhao/Documents/scImpute_H1_p96scimpute_count.rds")
#
# M_scImpute_H1<-SCnorm_runMAST3(Data=cbind(scImpute_H1_p24,scImpute_H1_p96),NumCells = c(92,92))
# length(which(M_scImpute_H1$adjpval<0.05))











# aa1<-10
# aa2<-5
# x1<-rowMeans(H1_p24[whichg_H1,]/aa1)
# x2<-rowMeans(H1_p96[whichg_H1,]/aa2)
# y1<-apply(H1_p24[whichg_H1,]/aa1,1,function(x){length(which(x==0))/length(x)})
# y2<-apply(H1_p96[whichg_H1,]/aa2,1,function(x){length(which(x==0))/length(x)})
#
# plot(x1,y1,log='x')
# points(x2,y2,col=3)
# lines(sort(x1),exp(-sort(x1)),col=5)


qq2<-scnorm_out_H1@metadata$NormalizedData

dim(qq2)

H1_data_comb<-cbind(H1_p24,H1_p96)[whichg_H1,]
dim(H1_data_comb)




# Conditional median over all cells.
Inputdat<-H1_data_comb


MedExp <- log(apply(Inputdat, 1, function(x) median(x[x != 0])))

sum(duplicated(MedExp))

hist(MedExp)
summary(MedExp)

# split into 4 equally sized groups:
grpnum <- 6
splitby <- sort(MedExp)
grps <- length(splitby)/grpnum
sreg <- split(splitby, ceiling(seq_along(splitby)/grps))

CONDITION_H1<-c(rep(1,92),rep(2,92))
CONDITION=CONDITION_H1


# load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_01/mast_othernorm.RData")
# load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_01/tstat_othernorm.RData")

load("E:/RNAseqProject/Bacher__SCnorm_2016/scaled_BAY/H1_bayNorm_esf_01/MAST_bay_mat.RData")
MAST_bay_median<-apply(MAST_bay_mat,1,median)

reee='MAST'
# reee='TSTAT'
# reee='ROTS'


if(reee=='MAST'){

    #mean bay
    #INPUT_LIST_temp<-list(R_MAST_bay_adj=M_mBAY_H1$adjpval,R_MAST_scnorm_adj=M_SCnorm_H1$adjpval,R_MAST_scimpute_adj=M_scImpute_H1$adjpval,Scaling=M_RB_H1$adjpval)
    #array bay
    INPUT_LIST_temp<-list(R_MAST_bay_adj=apply(MAST_bay_mat,1,median),R_MAST_scnorm_adj=M_SCnorm_H1$adjpval,R_MAST_scimpute_adj=M_scImpute_H1$adjpval,Scaling=M_RB_H1$adjpval,MAGIC=M_magic_H1$adjpval,DCA=M_DCA$adjpval)


}else if (reee=='TSTAT'){
    #INPUT_LIST_temp<-list(TSTAT_bay=tstat_bay2,TSTAT_saver=tstat_saver2,TSTAT_scnorm=tstat_scnorm2,TSTAT_scran=tstat_scran2,TSTAT_rpm=tstat_rpm2,TSTAT_tmm=tstat_tmm2,TSTAT_deseq=tstat_deseq2)

    # names(T_mBAY_H1)<-names(M_mBAY_H1$adjpval)
    # names(T_scImpute_H1)<-names(M_mBAY_H1$adjpval)
    #T_mBAY_H1
    #Wori_aBAYs_H1
    INPUT_LIST_temp<-list(TSTAT_bay=T_mBAY_H1,TSTAT_scnorm=W_SCnorm_H1,TSTAT_scimpute=T_scImpute_H1)

} else if(reee=='ROTS'){
    names(R_scImpute_H9)<-names(R_mBAY_H9)
    INPUT_LIST_temp<-list(R_bay=R_mBAY_H9,R_scnorm=R_SCnorm_H9,R_scimpute=R_scImpute_H9)

}

INPUT_LIST<-INPUT_LIST_temp
names(INPUT_LIST)<-names(INPUT_LIST_temp)

Gene_exp_gr<-seq(1,grpnum)

library(foreach)
thres<-0.05

#norm_vec<-c('bayNorm','SAVER','SCnorm','scran','RPM','TMM','DESeq')
norm_vec<-c('bayNorm','SCnorm','scImpute','Scaling','MAGIC','DCA')
BAR_MAST_l_list<-foreach(i=1:length(sreg))%do%{
    BAR_MAST_l<-lapply(INPUT_LIST,function(x){length(intersect(names(which(x<thres)),names(sreg[[i]])))})
    #BAR_MAST_l<-lapply(INPUT_LIST,function(x){length(intersect(names(which(x[,4]<thres)),names(sreg[[i]])))})

    return(BAR_MAST_l)

}

BAR_MAST_DAT<-foreach(i=1:length(BAR_MAST_l_list),.combine=rbind)%:%
    foreach(j=1:length(INPUT_LIST),.combine=rbind)%do%{
        temp<-BAR_MAST_l_list[[i]][[j]]
        temp<-c(temp,norm_vec[j],Gene_exp_gr[i])
        return(temp)
    }


BAR_MAST_DAT<-as.data.frame(BAR_MAST_DAT)
colnames(BAR_MAST_DAT)<-c('Number of detected DE genes','Normalization methods','Gene expression group')
BAR_MAST_DAT[,1]<-as.numeric(as.character(BAR_MAST_DAT[,1]))
BAR_MAST_DAT[,3]<-factor(BAR_MAST_DAT[,3],levels=unique(BAR_MAST_DAT[,3]))
BAR_MAST_DAT[,2]<-factor(BAR_MAST_DAT[,2],levels=unique(BAR_MAST_DAT[,2]))



cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
names(cbbPalette )<-c('NULL','bayNorm','SCnorm','Scaling','SAVER','scImpute','MAGIC','DCA')
cbbPalette2<-cbbPalette[which(names(cbbPalette) %in% norm_vec)]


library(ggplot2)
textsize<-10
useee<-BAR_MAST_DAT$`Normalization methods`!='scImpute'
DE_H1<-ggplot(data=BAR_MAST_DAT[useee,], aes(x=BAR_MAST_DAT[useee,3], y=BAR_MAST_DAT[useee,1], fill=BAR_MAST_DAT[useee,2])) +
    geom_bar(stat="identity", position = position_dodge(0.9),width=0.9)+
    geom_text(aes(label=BAR_MAST_DAT[useee,1]), vjust=0, color="black", position = position_dodge(0.9), size=2.5)+
    labs(x = "Gene expression group",y='Number of detected DE genes',fill='Normalization methods')+ggtitle("H1 data from Bacher case study") +
    #scale_fill_brewer(palette="Paired")+
    scale_fill_manual(values=cbbPalette2)+
    theme(legend.text = element_text(size = textsize),legend.title  = element_text(size = textsize),plot.title = element_text(size = textsize),axis.title = element_text(size = textsize),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
          panel.background = element_blank(), axis.line = element_line(colour = "black"),plot.subtitle = element_text(size = textsize),plot.caption =  element_text(size = textsize),axis.text=element_text(size=textsize) ,legend.key.size = unit(1,"line"),legend.position ='top')
#dev.off()
DE_H1









#####MSE########
mse_fun<-function(data,CONDITION){
    rowmean1<-rowMeans(data[,CONDITION==1])
    rowmean2<-rowMeans(data[,CONDITION==2])
    msee<-mean((rowmean1-rowmean2)^2)
    #msee<-msee

    return(msee)
}



library(foreach)
mse_bay<-foreach(i=1:length(sreg),.combine=rbind)%do%{
    qq<-  mse_fun(data=cbind(mBAY_H1$Bay_mat_list$`Group 1`,mBAY_H1$Bay_mat_list$`Group 2`)[names(sreg[[i]]),],CONDITION=CONDITION_H1)
    qq2<-c(qq,'bayNorm',names(sreg)[i])
    return(qq2)

}

mse_raw<-foreach(i=1:length(sreg),.combine=rbind)%do%{
    qq<-  mse_fun(data=H1_data_comb[names(sreg[[i]]),],CONDITION=CONDITION_H1)
    qq2<-c(qq,'Raw',names(sreg)[i])
    return(qq2)

}

mse_scnorm<-foreach(i=1:length(sreg),.combine=rbind)%do%{
    qq<-  mse_fun(data=scnorm_out_H1@assays@.xData$data$Counts[names(sreg[[i]]),],CONDITION=CONDITION_H1)
    qq2<-c(qq,'SCnorm',names(sreg)[i])
    return(qq2)
}

mse_scimpute<-foreach(i=1:length(sreg),.combine=rbind)%do%{
    qq<-  mse_fun(data=scImpute_H1[names(sreg[[i]]),],CONDITION=CONDITION_H1)
    qq2<-c(qq,'scImpute',names(sreg)[i])
    return(qq2)
}

mse_RB<-foreach(i=1:length(sreg),.combine=rbind)%do%{
    qq<-  mse_fun(data=RB_norm_H1[names(sreg[[i]]),],CONDITION=CONDITION_H1)
    qq2<-c(qq,'Scaling',names(sreg)[i])
    return(qq2)
}


Bar_mse<-rbind(mse_bay,mse_scnorm,mse_scimpute,mse_RB)
(methoddss=unique(Bar_mse[,2]))

Bar_mse<-as.data.frame(Bar_mse)
colnames(Bar_mse)<-c('MSE','Methods','Genegroup')
Bar_mse[,1]<-as.numeric(as.character(Bar_mse[,1]))
Bar_mse[,2]<-factor(Bar_mse[,2],levels=unique(Bar_mse[,2]))
Bar_mse[,3]<-factor(Bar_mse[,3],levels=unique(Bar_mse[,3]))




library(ggplot2)
textsize<-7
MSE_H1<-ggplot(data=Bar_mse, aes(x=Bar_mse[,3], y=log(Bar_mse[,1]), fill=Bar_mse[,2])) +
    geom_bar(stat="identity", position = position_dodge(0.9),width=0.9)+
    #geom_text(aes(label=round(log(Bar_mse[,1]),2)), vjust=0, color="black", position = position_dodge(0.9), size=2.5)+
    labs(x = "Gene expression group",y='log of MSE',fill='Normalization methods')+
    #ggtitle("H1 data from Bacher case study") +
    #scale_fill_brewer(palette="Paired")+
    scale_fill_manual(values=cbbPalette2)+
    theme(legend.text = element_text(size = textsize),legend.title  = element_text(size = textsize),plot.title = element_text(size = textsize),axis.title = element_text(size = textsize),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
          panel.background = element_blank(), axis.line = element_line(colour = "black"),plot.subtitle = element_text(size = textsize),plot.caption =  element_text(size = textsize),axis.text=element_text(size=textsize) ,legend.key.size = unit(0.25,"line"),legend.position ='top')
#dev.off()
MSE_H1


source(file="E:/RNAseqProject/MANY_SAVE_PATH.R")
library(gridExtra)
library(ggpubr)
library(cowplot)
#qq<-ggarrange(DE_H1 ,MSE_H1,ncol=2,nrow=1,common.legend = TRUE, legend="top")
qq<-plot_grid(DE_H1 + theme(legend.position="none"),MSE_H1,ncol=2,nrow=1)
#draw_grob(get_legend(DE_H1), 0.55, 0.75, 1/3, 0.5)
qq
ggsave(FIGURE_2_PATH_fun("/FIG2_SCnorm.pdf"),plot=qq,width = 8.1, height =3.5,units='in')




######FC plot#####
DATA_list<-list(bayNorm=cbind(mBAY_H1$Bay_mat_list$`Group 1`,mBAY_H1$Bay_mat_list$`Group 2`),SCnorm=scnorm_out_H1@metadata$NormalizedData[whichg_H1,],scImpute=scImpute_H1,Scaling=RB_norm_H1,MAGIC=MAGIC_H1,DCA=DCA_H1)

cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
names(cbbPalette )<-c('NULL','bayNorm','SCnorm','Scaling','SAVER','scImpute','MAGIC','DCA')
cbbPalette2<-cbbPalette[which(names(cbbPalette) %in% norm_vec)][norm_vec]

source("E:/RNAseqProject/Bacher__SCnorm_2016/FC_fun.R")
FC_H1<-FC_fun(Inputdat=cbind(H1_p24,H1_p96)[whichg_H1,],CONDITION=CONDITION_H1,DATA_list[-3],textsize=10,legend.key.size=0.5,colourval=cbbPalette2)
FC_H1

# qq<-ggplot_build(FC_H1)
# unique(qq$data[[1]]["fill"])




source(file="E:/RNAseqProject/MANY_SAVE_PATH.R")
library(gridExtra)
library(ggpubr)
library(cowplot)
#qq<-ggarrange(DE_H1 ,MSE_H1,ncol=2,nrow=1,common.legend = TRUE, legend="top")
qq<-plot_grid(DE_H1 + theme(legend.position="none"),FC_H1,ncol=2,nrow=1)
#draw_grob(get_legend(DE_H1), 0.55, 0.75, 1/3, 0.5)
qq
ggsave(FIGURE_2_PATH_fun("/FIG2_SCnorm_V2_20samplestr.pdf"),plot=qq,width =11, height =5,units='in')


######parameter check#########
load("E:/RNAseqProject/Bacher__SCnorm_2016/DIY_sim/H1p96_bay_sim_allgene.RData")
source("E:/RNAseqProject/QQsim_v2_SingleCellExperiment.R")
Est_params<-H1p96_bay_sim$Est_params
Est_params@out.prob

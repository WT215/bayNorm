#########LOADING#############
#load("E:/RNAseqProject/tung2017batch/tung2017_load_raw.RData")
#load("E:/RNAseqProject/tung2017batch/CaptureEfficiency_ERCC.RData")
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/tung2017batch_Bay_ERCCBETA.RData")
source("E:/RNAseqProject/MANY_SAVE_PATH.r")
source("E:/RNAseqProject/TSTAT_140817.r")
source("E:/RNAseqProject/MANY_DE_FUN.R")
source("E:/RNAseqProject/MANY_NORM_FUN.R")

#RAW_BETA
 load("E:/RNAseqProject/tung2017batch/FINAL/RAW_BETA.RData")

#scImpute

load("E:/RNAseqProject/tung2017batch/FINAL/scImpute/scImpute_results.RData")
#mean bayNorm
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/mean_bayNorm/mean_bayNorm.RData")
#SAVER
load("E:/RNAseqProject/tung2017batch/FINAL/SAVER_individuals_1overBETA.RData")
grep(rownames(N1_DAT),pattern='ERCC')

#baymat.
grs<-c(dim(N2_DAT)[2],dim(N3_DAT)[2])
# M_bay_mat<-foreach(i=1:5,.combine=cbind)%do%{
#   Inputdat_bay<-cbind(Bay_2[,,i],Bay_3[,,i])
#  qq = SCnorm_runMAST(Data=Inputdat_bay, NumCells=as.numeric(grs))
#  return(qq$adjpval)
# }


#save(M_bay_mat,file="E:/RNAseqProject/tung2017batch/FINAL/M_bay_mat.RData")
load("E:/RNAseqProject/tung2017batch/FINAL/M_bay_mat.RData")


load("E:/RNAseqProject/tung2017batch/FINAL/SCnorm/SCnorm_norm_results.RData")




###plot########
load("E:/RNAseqProject/tung2017batch/FINAL/M_bay_mat.RData")
load("E:/RNAseqProject/tung2017batch/FINAL/MAGIC/MAGIC_TUNG.RData")

# library(ROTS)
# R_magic<-ROTS(data=MAGIC_TUNG[,colnames(cbind(N2_DAT,N3_DAT))],groups=c(rep(1,201),rep(2,221)),B=100,log=F)$FDR
# names(R_magic)<-rownames(MAGIC_TUNG)
#
# save(MAGIC_TUNG,MAST_magic,tstat_magic,R_magic,file="E:/RNAseqProject/tung2017batch/FINAL/MAGIC/MAGIC_TUNG.RData")



load("E:/RNAseqProject/tung2017batch/FINAL/SCnorm/SCnorm_norm_results.RData")
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/tung2017batch_Bay_ERCCBETA.RData")
source("E:/RNAseqProject/MANY_SAVE_PATH.r")
source("E:/RNAseqProject/TSTAT_140817.r")
source("E:/RNAseqProject/MANY_DE_FUN.R")
source("E:/RNAseqProject/MANY_NORM_FUN.R")



load("E:/RNAseqProject/tung2017batch/FINAL/RAW_BETA.RData")

load("E:/RNAseqProject/tung2017batch/FINAL/scImpute/scImpute_results.RData")

# load("E:/RNAseqProject/tung2017batch/FINAL/M_6norms.RData")
# load("E:/RNAseqProject/tung2017batch/FINAL/T_6norms.RData")

#SAVER
load("E:/RNAseqProject/tung2017batch/FINAL/SAVER_individuals_1overBETA.RData")


#mean bayNorm
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/mean_bayNorm/mean_bayNorm.RData")

#MAST_RE_LIST<-list(MAST_bay=apply(M_bay_mat,1,median),MAST_scnorm=MAST_scnorm$adjpval,MAST_scran=MAST_scran$adjpval,MAST_scimpute=MAST_scimpute$adjpval,MAST_RB=MAST_RB$adjpval)

#apply(M_aBAY,1,median)
#apply(M_bay_mat,1,median)
#MAST_mean_bayNorm$adjpval
MAST_RE_LIST<-list(MAST_bay=MAST_mean_bayNorm$adjpval,MAST_scnorm=M_scnorm$adjpval,MAST_scimpute=MAST_scimpute$adjpval,MAST_RB=MAST_RB$adjpval,MAST_saver=MAST_saver$adjpval,MAST_magic$adjpval)

#TSTAT_RE_LIST<-list(TSTAT_bay=tstat_bay2,TSTAT_scnorm=tstat_scnorm2,TSTAT_scran=tstat_scran2,TSTAT_scImpute=tstat_scimpute,TSTAT_RB=tstat_RB)
#apply(W_aBAY$matrixpval,1,median)
#tstat_mean_bayNorm
#W_aBAYs
#Wori_aBAYs
TSTAT_RE_LIST<-list(TSTAT_bay=Wori_aBAYs,TSTAT_scnorm=T_scnorm,TSTAT_scImpute=tstat_scimpute,TSTAT_RB=tstat_RB,TSTAT_saver=tstat_saver,tstat_magic)


ROTS_RE_LIST<-list(ROTS_bay=R_mBAY,ROTS_scnorm=R_scnorm,ROTS_scImpute=R_scImpute,ROTS_RB=R_RB,ROTS_saver=R_saver,ROTS_magic=R_magic)

SC3_RE_LIST<-list(ROTS_bay=SC3_mBAY,ROTS_scnorm=SC3_scnorm,ROTS_scImpute=SC3_scImpute,ROTS_RB=SC3_RB,ROTS_saver=SC3_saver,ROTS_magic=SC3_magic)


load('E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/DE_benchmark.RData')
table(DE_TRUE_LABEL)

library(foreach)

Sele<-'MAST'
Sele<-'wilcox.test'
Sele<-'ROTS'
Sele<-'SC3'

method_vec<-c('bayNorm','SCnorm','scImpute','Scaling','SAVER','MAGIC')
#method_vec<-c('bayNorm','SCnorm','scran','RPM','TMM','DESeq')
col_vec<-seq(1,length(method_vec))

if(Sele=='MAST'){
  Input_re_list<-MAST_RE_LIST
  mainn='DE detection method: MAST'
} else if(Sele=='wilcox.test'){
  Input_re_list<-TSTAT_RE_LIST
  mainn='DE detection method: wilcox.test'
} else if(Sele=='ROTS'){
  Input_re_list<-ROTS_RE_LIST
  mainn='DE detection method: ROTS'
} else if(Sele=='SC3'){
  Input_re_list<-SC3_RE_LIST
  mainn='DE detection method: SC3'
}



TRUE_LABEL_input<-DE_TRUE_LABEL

TRUE_LABEL_input[TRUE_LABEL_input==0]=3
TRUE_LABEL_input[TRUE_LABEL_input==1]=0
TRUE_LABEL_input[TRUE_LABEL_input==3]=1


table(DE_TRUE_LABEL)
length(DE_TRUE_LABEL)
length(MAST_bay$adjpval)


auc_vec<-NULL
library(ROCR)
list_pref<-foreach(i=1:length(Input_re_list))%do%{
  pred_MAST <- prediction(Input_re_list[[i]], TRUE_LABEL_input)
  perf_MAST <- performance( pred_MAST, "tpr", "fpr" )

  auc_temp<-performance( pred_MAST, measure='auc' )
  auc_temp<-auc_temp@y.values[[1]]
  auc_vec<-c(auc_vec,auc_temp)
  return(perf_MAST)
}

#jpeg(FIGURE_2_PATH_fun("/FIG2_Tung.jpeg"), width = 100, height = 100, units = 'mm', res = 300)
#postscript(FIGURE_2_PATH_fun("/FIG2_Tung.eps"),width=4,height=4)
pdf(FIGURE_2_PATH_fun("/FIG2_Tung.pdf"),width=4,height=4)
#par(mar=c(5,6,4,1)+.1)
ROC_fun(list_pref=list_pref,vec_auc=auc_vec,method_vec=method_vec,col_vec=col_vec,MAIN=mainn,cex=1,cex.axis=1,lwd=1.5,cex.lab=1,cex.legend=0.5,line=2)
abline(0,1,lty=2)
dev.off()



######BATCH EFFECT######
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/mean_bayNorm/mean_bayNorm.RData")
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/tung2017batch_Bay_ERCCBETA.RData")
load("E:/RNAseqProject/tung2017batch/FINAL/RAW_BETA.RData")
load("E:/RNAseqProject/tung2017batch/FINAL/scImpute/scImpute_results.RData")
load("E:/RNAseqProject/tung2017batch/FINAL/MAGIC/MAGIC_TUNG.RData")

BATCH_ALL<-c(rep(1,dim(N1_1_DAT)[2]),rep(3,dim(N1_3_DAT)[2]),rep(1,dim(N2_1_DAT)[2]),rep(2,dim(N2_2_DAT)[2]),rep(3,dim(N2_3_DAT)[2]),rep(1,dim(N3_1_DAT)[2]),rep(2,dim(N3_2_DAT)[2]),rep(3,dim(N3_3_DAT)[2]))
names(BATCH_ALL)<-colnames(cbind(N1_DAT,N2_DAT,N3_DAT))

library(abind)
#system.time(Bay_comb<-abind(Bay_1,Bay_2,Bay_3,along=2))
#grep(rownames(Bay_comb),pattern='ERCC')
#pca_try <- prcomp(t(cbind(Bay_1[,,1],Bay_2[,,1],Bay_3[,,1])),scale=T)
pca_try <- prcomp(t(cbind(bayNorm_mean_N1$Bay_mat,bayNorm_mean_N2$Bay_mat,bayNorm_mean_N3$Bay_mat)),scale=T)
#pca_try <- prcomp(t(MAGIC_TUNG),scale=T)
#pca_try <- prcomp(t(cbind(scImpute_N1_DAT,scImpute_N2_DAT,scImpute_N3_DAT)),scale=T)
#pca_try <- prcomp(t(cbind(saver_N1$estimate,saver_N2$estimate,saver_N3$estimate)),scale=T)

source("E:/RNAseqProject/tung2017batch/FINAL/BATCH_DE_CHECK/BATCH_BAR_FUN.R")
textsize=6
pointsize=0.5
legendpointsize=1
legend_key_size<-0.25
BATCH_mbay<-PCA_FUN(pca_try=pca_try,LABEL_INDIVIDUAL =LABEL_INDIVIDUAL ,LABEL_REP = LABEL_REP,textsize=textsize,pointsize = pointsize,legendpointsize=legendpointsize,legend_key_size=legend_key_size)
BATCH_mbay


#xx<-c(bayNorm_mean_N1$BETA,bayNorm_mean_N2$BETA,bayNorm_mean_N3$BETA)
xx<-apply(cbind(bayNorm_mean_N1$Bay_mat,bayNorm_mean_N2$Bay_mat,bayNorm_mean_N3$Bay_mat),2,function(x){length(which(x>0))/length(x)})
yy<-pca_try$x[,1]
plot(xx,yy,xlab='BETA',ylab='PC1',col=c(rep(1,142),rep(2,201),rep(3,221)),pch=BATCH_ALL)
abline(0,1)
legend('topleft',legend=c('NA19098','NA19101','NA19239'),col=c(1,2,3),pch=16)


RAW_BETA<-cbind(N1_DAT,N2_DAT,N3_DAT)/c(bayNorm_mean_N1$BETA,bayNorm_mean_N2$BETA,bayNorm_mean_N3$BETA)

#pca_try_RB <- prcomp(t(RAW_BETA),scale=T)
xx<-apply(RAW_BETA,2,function(x){length(which(x>0))/length(x)})
yy<-pca_try_RB$x[,1]
plot(xx,yy,pch=BATCH_ALL,xlab='proportion of nonzero per cell',ylab='PC1',col=c(rep(1,142),rep(2,201),rep(3,221)))
abline(0,1)
legend('topleft',legend=c('NA19098','NA19101','NA19239'),col=c(1,2,3),pch=16)




source("E:/RNAseqProject/tung2017batch/FINAL/BATCH_DE_CHECK/BATCH_BAR_FUN.R")
ggsave("E:/RNAseqProject/Illustrator_bayNorm/FIGURE_2/FIG2_Tung2_sample.pdf",plot=BATCH_mbay,width=6,height=6,units='in')


# pca_try_SAVER <- prcomp(t(cbind(saver_N1$estimate,saver_N2$estimate,saver_N3$estimate)),scale=T)
# pca_try_SCnorm <- prcomp(t(scnorm_norm),scale=T)
# pca_try_scImpute <- prcomp(t(cbind(scImpute_N1_DAT,scImpute_N2_DAT,scImpute_N3_DAT)),scale=T)
# pca_try_MAGIC <- prcomp(t(MAGIC_TUNG),scale=T)
# save(pca_try_SAVER,pca_try_SCnorm,pca_try_scImpute,pca_try_MAGIC,file="E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/mean_bayNorm/pca_try.RData")
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/mean_bayNorm/pca_try.RData")
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/tung2017batch_Bay_ERCCBETA.RData")
source("E:/RNAseqProject/tung2017batch/FINAL/BATCH_DE_CHECK/BATCH_BAR_FUN.R")
textsize=14
pointsize=1
legendpointsize=1
BATCH_SAVER<-PCA_FUN(pca_try=pca_try_SAVER,LABEL_INDIVIDUAL =LABEL_INDIVIDUAL ,LABEL_REP = LABEL_REP,textsize=textsize,pointsize = pointsize,legendpointsize=legendpointsize,TITLE='SAVER')
BATCH_SCnorm<-PCA_FUN(pca_try=pca_try_SCnorm,LABEL_INDIVIDUAL =LABEL_INDIVIDUAL ,LABEL_REP = LABEL_REP,textsize=textsize,pointsize = pointsize,legendpointsize=legendpointsize,TITLE='SCnorm')
BATCH_scImpute<-PCA_FUN(pca_try=pca_try_scImpute,LABEL_INDIVIDUAL =LABEL_INDIVIDUAL ,LABEL_REP = LABEL_REP,textsize=textsize,pointsize = pointsize,legendpointsize=legendpointsize,TITLE='scImpute')
BATCH_MAGIC<-PCA_FUN(pca_try=pca_try_MAGIC,LABEL_INDIVIDUAL =LABEL_INDIVIDUAL ,LABEL_REP = LABEL_REP,textsize=textsize,pointsize = pointsize,legendpointsize=legendpointsize,TITLE='MAGIC')

library(gridExtra)
library(ggpubr)
qq<-ggarrange(BATCH_SAVER,BATCH_SCnorm,BATCH_scImpute,BATCH_MAGIC,nrow=2,ncol=2,common.legend = TRUE, legend="bottom")
qq



source(file="E:/RNAseqProject/MANY_SAVE_PATH.R")
# postscript(FIGURE_SUP_PATH_fun("/SUP_BATCH.eps"),width=8,height=11)
# #grid.arrange(BATCH_SAVER,BATCH_SCnorm,BATCH_scImpute,BATCH_MAGIC,nrow=2,ncol=2)
 qq<-ggarrange(BATCH_SAVER,BATCH_SCnorm,BATCH_scImpute,BATCH_MAGIC,nrow=2,ncol=2,common.legend = TRUE, legend="bottom")
# dev.off()
ggsave(FIGURE_SUP_PATH_fun("/SUP_BATCH.pdf"),plot=qq,width=8,height=8,units='in')

#jpeg(FIGURE_2_PATH_fun("/FIG2_Tung2.jpeg"), width = 40, height = 30, units = 'in', res = 300)
source(file="E:/RNAseqProject/MANY_SAVE_PATH.R")
postscript(FIGURE_2_PATH_fun("/FIG2_Tung2.eps"),width=3,height=3)
#par(mar=c(5,6,4,1)+.1)
BATCH
dev.off()



pr_v<-summary(pca_try )$importance[2,]*100
percentage <- paste( colnames(pca_try$x), "(", paste( as.character(pr_v), "%", ")", sep="") )
dat<-pca_try$x[,1:2]
dim(N1_DAT)
library(ggplot2)
textsize<-10
BATCH<-ggplot(data=as.data.frame(dat),aes(x=PC1,y=PC2))+geom_point(aes(color=as.factor(LABEL_INDIVIDUAL),shape=as.factor(LABEL_REP)),size=1)+labs(color='Individual',shape='Replicate') + xlab(percentage[1]) + ylab(percentage[2])+ggtitle('')+theme(legend.position='right',plot.title = element_text(hjust = 0))+
  theme(legend.text = element_text(size = textsize),legend.title  = element_text(size = textsize),axis.title = element_text(size = textsize),panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),plot.subtitle = element_text(size =textsize),plot.caption =  element_text(size = textsize),axis.text=element_text(size=textsize) ,legend.position ='top',legend.key.size = unit(0.5,"line"))
BATCH




####N1 batch explore##########
load("E:/RNAseqProject/tung2017batch/FINAL/SAVER_individuals_BETA.RData")
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/tung2017batch_Bay_ERCCBETA.RData")
load("E:/RNAseqProject/tung2017batch/FINAL/scImpute/scImpute_results.RData")
source("E:/RNAseqProject/TSTAT_140817.r")
source("E:/RNAseqProject/MANY_DE_FUN.R")
source("E:/RNAseqProject/MANY_NORM_FUN.R")

##no need to run again
BATCH_N1<-LABEL_REP[seq(1,dim(N1_DAT)[2])]
grs<-table(BATCH_N1)

bayinput_n1<-Bay_1[,,1]
scnorm_n1<-scnorm_fun(x=N1_DAT,Conditions = BATCH_N1)
scnorm_count_n1<-scnorm_n1@metadata$NormalizedData
Scran_norm_n1<-scran_norm(N1_DAT, sizes = c(20,30,40,50))$counts
rpm_norm_n1<-rpm(N1_DAT)$counts
TMM_norm_n1 <-tmm(N1_DAT)$counts
DESeq_norm_n1<-deseq(N1_DAT)$counts
Tung_norm_n1<-Tung2017_final[,grep(colnames(Tung2017_final),pattern='NA19098')]




save(bayinput_n1,scnorm_count_n1,Scran_norm_n1,rpm_norm_n1,TMM_norm_n1,DESeq_norm_n1,Tung_norm_n1,file="E:/RNAseqProject/tung2017batch/FINAL/N1_all6norms.RData")


load("E:/RNAseqProject/tung2017batch/FINAL/N1_all6norms.RData")
MAST_bay_n1 = SCnorm_runMAST(Data=bayinput_n1, NumCells=as.numeric(grs))
MAST_saver_n1 = SCnorm_runMAST(Data=saver_N1$estimate, NumCells=as.numeric(grs))
MAST_scnorm_n1 = SCnorm_runMAST(Data=scnorm_count_n1, NumCells=as.numeric(grs))
MAST_scran_n1 = SCnorm_runMAST(Data=Scran_norm_n1, NumCells=as.numeric(grs))

MAST_rpm_n1=SCnorm_runMAST(Data=rpm_norm_n1, NumCells=as.numeric(grs))
MAST_tmm_n1 = SCnorm_runMAST(Data=TMM_norm_n1, NumCells=as.numeric(grs))
MAST_deseq_n1 = SCnorm_runMAST(Data=DESeq_norm_n1, NumCells=as.numeric(grs))

MAST_Tung_n1 = SCnorm_runMAST(Data=Tung_norm_n1, NumCells=as.numeric(grs))

MAST_scImpute_n1 = SCnorm_runMAST(Data=scImpute_N1_DAT, NumCells=as.numeric(grs))

MAST_RB_n1 = SCnorm_runMAST(Data=RB_N1, NumCells=as.numeric(grs))

save(MAST_RB_n1,MAST_scImpute_n1,MAST_bay_n1,MAST_saver_n1,MAST_scnorm_n1,MAST_scran_n1,MAST_rpm_n1,MAST_tmm_n1,MAST_deseq_n1,MAST_Tung_n1,file="E:/RNAseqProject/tung2017batch/FINAL/N1_M_all6norms.RData")
load("E:/RNAseqProject/tung2017batch/FINAL/N1_M_all6norms.RData")

##begin analysis
load("E:/RNAseqProject/tung2017batch/FINAL/N1_M_all6norms.RData")
#M_n1_list<-list(MAST_bay=MAST_bay_n1$adjpval,MAST_saver=MAST_saver_n1$adjpval,MAST_scnorm=MAST_scnorm_n1$adjpval,MAST_scran=MAST_scran_n1$adjpval,MAST_rpm=MAST_rpm_n1$adjpval,MAST_tmm=MAST_tmm_n1$adjpval,MAST_deseq=MAST_deseq_n1$adjpval,MAST_Tung=MAST_Tung_n1$adjpval)
M_n1_list<-list(MAST_bay=MAST_bay_n1$adjpval,MAST_scnorm=MAST_scnorm_n1$adjpval,MAST_scran=MAST_scran_n1$adjpval,MAST_scImpute=MAST_scImpute_n1$adjpval,MAST_RB=MAST_RB_n1$adjpval)


#method_vec<-c('bayNorm','SAVER','SCnorm','scran','RPM','TMM','DESeq','Tung')
method_vec<-c('bayNorm','SCnorm','scran','scImpute','Scaling')
col_vec<-seq(1,length(method_vec))
library(foreach)
thrrr_vec<-c(0.01,0.05,0.1)
BAR_DAT<-foreach(i = seq(1,3),.combine=rbind)%do%{
thrrr<-thrrr_vec[i]
  ng_vec<-unlist(lapply(M_n1_list,function(x){length(which(x<thrrr))}))
  ng_vec<-cbind(ng_vec,rep(thrrr,length(M_n1_list)))
  ng_vec<-cbind(ng_vec,method_vec)
  ng_vec<-cbind(ng_vec,unlist(lapply(M_n1_list,function(x){length(which(x<thrrr))/length(x)})))
}



colnames(BAR_DAT)<-c('Number of detected DE genes','Adjusted P-values threshold','Normalization method','False positive rates')

BAR_DAT<-as.data.frame(BAR_DAT)

BAR_DAT[,1]<-as.numeric(as.character(BAR_DAT[,1]))
BAR_DAT[,4]<-as.numeric(as.character(BAR_DAT[,4]))
BAR_DAT[,2]<-factor(BAR_DAT[,2],levels=unique(BAR_DAT[,2]))
BAR_DAT[,3]<-factor(BAR_DAT[,3],levels=unique(BAR_DAT[,3]))

textsize<-5
N1_BATCH_FIG<-ggplot(data=BAR_DAT, aes(x=BAR_DAT[,2], y=BAR_DAT[,4], fill=BAR_DAT[,3])) +
  geom_bar(stat="identity", position = position_dodge(0.9),width=0.9)+
  geom_text(aes(label=round(BAR_DAT[,4],2)), vjust=1.6, color="black", position = position_dodge(0.9), size=1)+
  labs(x = 'Adjusted P values threshold',y='False positive rate',fill='Normalization methods')+ggtitle("") +
  scale_fill_brewer(palette="Paired")+
  theme(legend.text = element_text(size = textsize),legend.title  = element_text(size = textsize),plot.title = element_text(size = textsize),axis.title = element_text(size = textsize),panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),plot.subtitle = element_text(size =textsize),plot.caption =  element_text(size = textsize),axis.text=element_text(size=textsize) )


N1_BATCH_FIG

#jpeg(FIGURE_2_PATH_fun('/FIG2_N1_DE.jpg'), width = 40, height = 30, units = 'in', res = 300)
source(file="E:/RNAseqProject/MANY_SAVE_PATH.R")
postscript(FIGURE_2_PATH_fun("/FIG2_N1_DE.eps"),width=3.5,height=3.5)
N1_BATCH_FIG
dev.off()

######Tung 2017 final good data######
Tung2017_final<-read.table(file="E:/RNAseqProject/tung2017batch/molecules-final.txt")
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/tung2017batch_Bay_ERCCBETA.RData")
dim(Tung2017_final)

length(LABEL_REP)

pca_try <- prcomp(t(Tung2017_final),scale=T)
pr_v<-summary(pca_try )$importance[2,]*100
percentage <- paste( colnames(pca_try$x), "(", paste( as.character(pr_v), "%", ")", sep="") )
dat<-pca_try$x[,1:2]
dim(N1_DAT)
library(ggplot2)
textsize<-25
ggplot(data=as.data.frame(dat),aes(x=PC1,y=PC2))+geom_point(aes(color=as.factor(LABEL_INDIVIDUAL),shape=as.factor(LABEL_REP)))+labs(color='Individual',shape='Replicate') + xlab(percentage[1]) + ylab(percentage[2])+ggtitle("Tung et al. 2017")+theme(legend.position='right',plot.title = element_text(hjust = 0.5))+
  theme(legend.text = element_text(size = textsize),legend.title  = element_text(size = textsize),plot.title = element_text(size = textsize),axis.title = element_text(size = textsize),panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),plot.subtitle = element_text(size =textsize),plot.caption =  element_text(size = textsize),axis.text=element_text(size=textsize) )



########BETA CHECK######
pathhhh<-"E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/mean_bayNorm/meanBATCH_CHECK/forpaper"
path_fun<-function(filename){
    qq<-paste(pathhhh,filename,sep='')
    return(qq)
}

load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/tung2017batch_Bay_ERCCBETA.RData")
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/mean_bayNorm/mean_bayNorm_adjBETA.RData")


names(LABEL_REP)<-colnames(cbind(N1_DAT,N2_DAT,N3_DAT))

width<-4
height=9
postscript(path_fun('/ERCC_BETA.eps'), width =width, height =height)
par(mfrow=c(3,1))
plot(efficiency[colnames(N1_DAT)],col=LABEL_REP[colnames(N1_DAT)],ylab='ERCC BETA',pch=16,main='NA19098')
plot(efficiency[colnames(N2_DAT)],col=LABEL_REP[colnames(N2_DAT)],ylab='ERCC BETA',pch=16,main="NA19101")
plot(efficiency[colnames(N3_DAT)],col=LABEL_REP[colnames(N3_DAT)],ylab='ERCC BETA',pch=16,main='NA19239')
dev.off()

summary(efficiency[colnames(N1_DAT)][names(which(LABEL_REP[names(BETA1)]==1))])
summary(efficiency[colnames(N1_DAT)][names(which(LABEL_REP[names(BETA1)]==3))])
summary(efficiency[colnames(N1_DAT)])


eff_N1<-efficiency[colnames(N1_DAT)]
eff_N2<-efficiency[colnames(N2_DAT)]
eff_N3<-efficiency[colnames(N3_DAT)]

names(LABEL_REP)<-colnames(cbind(N1_DAT,N2_DAT,N3_DAT))
Beff_N1<-LABEL_REP[names(eff_N1)]
Beff_N2<-LABEL_REP[names(eff_N2)]
Beff_N3<-LABEL_REP[names(eff_N3)]

x1<-mean(c(mean(eff_N1[names(which(Beff_N1==1))]),mean(eff_N1[names(which(Beff_N1==3))])))
x2<-mean(c(mean(eff_N2[names(which(Beff_N2==1))]),mean(eff_N2[names(which(Beff_N2==2))]),mean(eff_N2[names(which(Beff_N2==3))])))
x3<-mean(c(mean(eff_N3[names(which(Beff_N3==1))]),mean(eff_N3[names(which(Beff_N3==2))]),mean(eff_N3[names(which(Beff_N3==3))])))



adjBETA1<-c(eff_N1[names(which(Beff_N1==1))]/mean(eff_N1[names(which(Beff_N1==1))])*x1,eff_N1[names(which(Beff_N1==3))]/mean(eff_N1[names(which(Beff_N1==3))])*x1)

adjBETA2<-c(eff_N2[names(which(Beff_N2==1))]/mean(eff_N2[names(which(Beff_N2==1))])*x2,
         eff_N2[names(which(Beff_N2==2))]/mean(eff_N2[names(which(Beff_N2==2))])*x2,
         eff_N2[names(which(Beff_N2==3))]/mean(eff_N2[names(which(Beff_N2==3))])*x2)

adjBETA3<-c(eff_N3[names(which(Beff_N3==1))]/mean(eff_N3[names(which(Beff_N3==1))])*x3,
         eff_N3[names(which(Beff_N3==2))]/mean(eff_N3[names(which(Beff_N3==2))])*x3,
         eff_N3[names(which(Beff_N3==3))]/mean(eff_N3[names(which(Beff_N3==3))])*x3)

names(adjBETA1)<-names(eff_N1)
names(adjBETA2)<-names(eff_N2)
names(adjBETA3)<-names(eff_N3)






postscript(path_fun('/Adjusted ERCC_BETA.eps'), width =width, height =height)
par(mfrow=c(3,1))
plot(adjBETA1,col=LABEL_REP[names(adjBETA1)],ylab='Adjusted ERCC_BETA',pch=16,main='NA19098')
plot(adjBETA2,col=LABEL_REP[names(adjBETA2)],ylab='Adjusted ERCC_BETA',pch=16,main="NA19101")
plot(adjBETA3,col=LABEL_REP[names(adjBETA3)],ylab='Adjusted ERCC_BETA',pch=16,main='NA19239')
dev.off()


width<-8
height=10
postscript(path_fun('/ERCC_BETA_both.eps'), width =width, height =height)
par(mfcol=c(3,2))
plot(efficiency[colnames(N1_DAT)],col=LABEL_REP[colnames(N1_DAT)],ylab='ERCC BETA',pch=16,main='NA19098')
legend('topleft',legend=c('Batch 1','Batch 3'),col=c(1,3),pch=16,bty = "n")

plot(efficiency[colnames(N2_DAT)],col=LABEL_REP[colnames(N2_DAT)],ylab='ERCC BETA',pch=16,main="NA19101")
legend('topleft',legend=c('Batch 1','Batch 2','Batch 3'),col=c(1,2,3),pch=16,bty = "n")

plot(efficiency[colnames(N3_DAT)],col=LABEL_REP[colnames(N3_DAT)],ylab='ERCC BETA',pch=16,main='NA19239')
legend('topleft',legend=c('Batch 1','Batch 2','Batch 3'),col=c(1,2,3),pch=16,bty = "n")


plot(adjBETA1,col=LABEL_REP[names(adjBETA1)],ylab='Adjusted ERCC BETA',pch=16,main='NA19098')
legend('topleft',legend=c('Batch 1','Batch 3'),col=c(1,3),pch=16,bty = "n")

plot(adjBETA2,col=LABEL_REP[names(adjBETA2)],ylab='Adjusted ERCC BETA',pch=16,main="NA19101")
legend('topleft',legend=c('Batch 1','Batch 2','Batch 3'),col=c(1,2,3),pch=16,bty = "n")

plot(adjBETA3,col=LABEL_REP[names(adjBETA3)],ylab='Adjusted ERCC BETA',pch=16,main='NA19239')
legend('topleft',legend=c('Batch 1','Batch 2','Batch 3'),col=c(1,2,3),pch=16,bty = "n")

dev.off()

qq<-efficiency[colnames(N2_DAT)]/mean(efficiency[colnames(N2_DAT)])*1.5

plot(qq)

summary(efficiency[colnames(N2_DAT)])
summary(adjBETA2)

library(devtools)
devtools::install_github("WT215/bayNorm")
library(bayNorm)
remove.packages("bayNorm")
library(devtools)
devtools::install_github("WT215/bayNorm")
library(devtools)
devtools::install_github("WT215/bayNorm")
library(bayNorm)
library(bayNorm)
set.seed(12300)
data("EXAMPLE_DATA_list")
set.seed(1258484)
q1<- bayNorm(Data=EXAMPLE_DATA_list$inputdata[seq(1,10),],BETA_vec = EXAMPLE_DATA_list$inputbeta,parallel = F)
?bayNorm
library(bayNorm)
library(bayNorm)
library(bayNorm)
library(bayNorm)
library(BiocCheck)
BiocCheck("E:/RNAseqProject/bayNorm_dev/bayNorm")
library(bayNorm)
load("E:/RNAseqProject/FORMAL_DATA/new_BETA7/BB_GG_28_11/MBB_GG_28_11/newRF/RF_BayMean.RData")
library(bayNorm)
library(bayNorm)
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/tung2017batch_Bay_ERCCBETA.RData")
source("E:/RNAseqProject/MANY_SAVE_PATH.r")
source("E:/RNAseqProject/TSTAT_140817.r")
source("E:/RNAseqProject/MANY_DE_FUN.R")
source("E:/RNAseqProject/MANY_NORM_FUN.R")
source("E:/RNAseqProject/tung2017batch/FINAL/BATCH_DE_CHECK/BATCH_BAR_FUN.R")
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/mean_bayNorm/mean_bayNorm_TCE.RData")
library(scran)
sf1<-computeSumFactors(x=N1_DAT,sizes=c(20,30,40,50))
sf2<-computeSumFactors(x=N2_DAT,sizes=c(20,30,40,50))
sf3<-computeSumFactors(x=N3_DAT,sizes=c(20,30,40,50))
B1<-sf1/mean(sf1)*mean(efficiency[colnames(N1_DAT)])
B2<-sf2/mean(sf2)*mean(efficiency[colnames(N2_DAT)])
B3<-sf3/mean(sf3)*mean(efficiency[colnames(N3_DAT)])
plot(B1,bayNorm_mean_N1$BETA)
abline(0,1)
names(LABEL_REP)<-colnames(cbind(N1_DAT,N2_DAT,N3_DAT))
plot(B1,bayNorm_mean_N1$BETA,col=LABEL_REP[colnames(N1_DAT)])
abline(0,1)
plot(B2,bayNorm_mean_N2$BETA,col=LABEL_REP[colnames(N1_DAT)])
abline(0,1)
plot(B2,bayNorm_mean_N2$BETA,col=LABEL_REP[colnames(N2_DAT)])
plot(B3,bayNorm_mean_N3$BETA,col=LABEL_REP[colnames(N3_DAT)])
abline(0,1)
plot(B1,bayNorm_mean_N1$BETA,col=LABEL_REP[colnames(N1_DAT)])
abline(0,1)
plot(B1,efficiency[colnames(N1_DAT)],col=LABEL_REP[colnames(N1_DAT)])
abline(0,1)
plot(B2,efficiency[colnames(N2_DAT)],col=LABEL_REP[colnames(N2_DAT)])
abline(0,1)
plot(B2,col=LABEL_REP[colnames(N2_DAT)])
plot(B1,col=LABEL_REP[colnames(N2_DAT)])
plot(B1,efficiency[colnames(N1_DAT)],col=LABEL_REP[colnames(N2_DAT)])
plot(B1,efficiency[colnames(N1_DAT)],col=LABEL_REP[colnames(N1_DAT)])
abline(0,1)
plot(B2,bayNorm_mean_N2$BETA,col=LABEL_REP[colnames(N2_DAT)])
abline(0,1)
sf<-computeSumFactors(x=cbind(N1_DAT,N2_DAT,N3_DAT),sizes=c(20,30,40,50,100,200))
sf
names(sf)<-colnames(cbind(N1_DAT,N2_DAT,N3_DAT))
plot(sf[colnames(N1_DAT)],col=LABEL_REP[colnames(N1_DAT)])
plot(sf[colnames(N2_DAT)],col=LABEL_REP[colnames(N2_DAT)])
plot(sf[colnames(N3_DAT)],col=LABEL_REP[colnames(N3_DAT)])
plot(sf[colnames(N1_DAT)],efficiency[colnames(N1_DAT)],col=LABEL_REP[colnames(N1_DAT)])
summary(sf[colnames(N1_DAT)])
yy<-efficiency[colnames(N1_DAT)]
yy<-yy/mean(yy)
xx<-sf[colnames(N1_DAT)]
xx<-xx/mean(xx)
plot(xx,yy,col=LABEL_REP[colnames(N1_DAT)])
abline(0,1)
plot(efficiency[N1_DAT])
plot(efficiency[colnames(N1_DAT)])
efficiency[colnames(N1_DAT)]
plot(efficiency[colnames(N1_DAT)])
plot(xx)
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/tung2017batch_Bay_ERCCBETA.RData")
######batch#########
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/mean_bayNorm/mean_bayNorm_adjBETA.RData")
pca_try <- prcomp(t(cbind(bayNorm_mean_N1$Bay_mat,bayNorm_mean_N2$Bay_mat,bayNorm_mean_N3$Bay_mat)),scale=T)
pr_v<-summary(pca_try )$importance[2,]*100
percentage <- paste( colnames(pca_try$x), "(", paste( as.character(pr_v), "%", ")", sep="") )
dat<-pca_try$x[,1:2]
dim(N1_DAT)
library(ggplot2)
textsize<-4
BATCH<-ggplot(data=as.data.frame(dat),aes(x=PC1,y=PC2))+geom_point(aes(color=as.factor(LABEL_INDIVIDUAL),shape=as.factor(LABEL_REP)),size=1)+labs(color='Individual',shape='Replicate') + xlab(percentage[1]) + ylab(percentage[2])+ggtitle('')+theme(legend.position='right',plot.title = element_text(hjust = 0))+
theme(legend.text = element_text(size = textsize),legend.title  = element_text(size = textsize),axis.title = element_text(size = textsize),panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),plot.subtitle = element_text(size =textsize),plot.caption =  element_text(size = textsize),axis.text=element_text(size=textsize) ,legend.position ='top',legend.key.size = unit(0.5,"line"))
BATCH
anno <- read.table("E:/RNAseqProject/tung2017batch/annotation.txt", header = TRUE,stringsAsFactors = FALSE)
head(anno)
ercc <- read.table("E:/RNAseqProject/tung2017batch/ercc-info.txt", header = TRUE, sep = "\t",stringsAsFactors = FALSE)
colnames(ercc) <- c("num", "id", "subgroup", "conc_mix1", "conc_mix2", "expected_fc", "log2_mix1_mix2")
head(ercc)
stopifnot(nrow(ercc) == 92)
molecules <- read.table("E:/RNAseqProject/tung2017batch/molecules.txt", header = TRUE,stringsAsFactors = FALSE)
quality_single_cells <- scan("E:/RNAseqProject/tung2017batch/quality-single-cells.txt",what = "character")
qc <- read.table("E:/RNAseqProject/tung2017batch/qc-ipsc.txt", header = TRUE, stringsAsFactors = FALSE)
stopifnot(nrow(qc) == sum(anno$well != "bulk"))
length(molecules$NA19098.r1.A03[rownames(N1_DAT)])
#Prepare single cell molecule data
molecules_single <- molecules[, anno$well != "bulk"]
anno_single <- anno[anno$well != "bulk", ]
#Remove genes with zero read counts in the single cells.
expressed_single <- rowSums(molecules_single) > 0
molecules_single <- molecules_single[expressed_single, ]
dim(molecules_single)
overexpressed_genes <- rownames(molecules_single)[apply(molecules_single, 1,function(x) any(x >= 1024))]
length(overexpressed_genes)
#####Calculate number of ERCC molecules added to each well
summary(ercc$conc_mix1)
# Dilute 1:2500
ercc_conc_diluted <- ercc$conc_mix1 / 2500
# Dilute 1:20
ercc_conc_lysis <- ercc_conc_diluted / 20
ercc_molecules_lysis <- ercc_conc_lysis *
20 * # Number of uL of lysis buffer
1/10^18 * # Number of attomoles in a mole
6.02214179e23 # Number of molecules in a mole
# 9 uL added to chip
ercc_molecules_chip <- ercc_molecules_lysis * 9 / 20
summary(ercc_molecules_chip)
# 9 nL per well
ercc_molecules_well <- ercc_molecules_lysis * 9e-3 / 20
summary(ercc_molecules_well)
sum(ercc_molecules_well)
sum(ercc_molecules_well >= 1)
sum(ercc_molecules_well > 1024)
sum(ercc_molecules_well %% 2 == 0)
ercc_index <- grep("ERCC", rownames(molecules_single))
length(ercc_index)
#####capture efficiency
expected_ercc_molecules <- read.table("E:/RNAseqProject/tung2017batch/expected-ercc-molecules.txt", header = TRUE, sep = "\t",stringsAsFactors = FALSE)
ercc_table<-molecules_single[ercc_index,]
plot(colSums(ercc_table[,colnames(N1_DAT)]),col=LABEL_REP[colnames(N1_DAT)])
colSums(ercc_table[,colnames(N1_DAT)])
plot(colSums(ercc_table[,colnames(N2_DAT)]),col=LABEL_REP[colnames(N2_DAT)])
LABEL_REP
names(LABEL_REP)<-colnames(cbind(N1_DAT,N2_DAT,N3_DAT))
plot(colSums(ercc_table[,colnames(N2_DAT)]),col=LABEL_REP[colnames(N2_DAT)])
plot(colSums(ercc_table[,colnames(N1_DAT)]),col=LABEL_REP[colnames(N1_DAT)])
######batch#########
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/mean_bayNorm/mean_bayNorm.RData")
pca_try <- prcomp(t(cbind(bayNorm_mean_N1$Bay_mat,bayNorm_mean_N2$Bay_mat,bayNorm_mean_N3$Bay_mat)),scale=T)
pr_v<-summary(pca_try )$importance[2,]*100
percentage <- paste( colnames(pca_try$x), "(", paste( as.character(pr_v), "%", ")", sep="") )
dat<-pca_try$x[,1:2]
dim(N1_DAT)
library(ggplot2)
textsize<-4
BATCH<-ggplot(data=as.data.frame(dat),aes(x=PC1,y=PC2))+geom_point(aes(color=as.factor(LABEL_INDIVIDUAL),shape=as.factor(LABEL_REP)),size=1)+labs(color='Individual',shape='Replicate') + xlab(percentage[1]) + ylab(percentage[2])+ggtitle('')+theme(legend.position='right',plot.title = element_text(hjust = 0))+
theme(legend.text = element_text(size = textsize),legend.title  = element_text(size = textsize),axis.title = element_text(size = textsize),panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),plot.subtitle = element_text(size =textsize),plot.caption =  element_text(size = textsize),axis.text=element_text(size=textsize) ,legend.position ='top',legend.key.size = unit(0.5,"line"))
BATCH
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/tung2017batch_Bay_ERCCBETA.RData")
BATCH
source("E:/RNAseqProject/tung2017batch/FINAL/BATCH_DE_CHECK/BATCH_BAR_FUN.R")
######batch#########
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/mean_bayNorm/mean_bayNorm.RData")
load("E:/RNAseqProject/tung2017batch/MMEADJ_ERCCBETA/tung2017batch_Bay_ERCCBETA.RData")
source("E:/RNAseqProject/tung2017batch/FINAL/BATCH_DE_CHECK/BATCH_BAR_FUN.R")
#N2: 1 2#######
N2_meanbay<-bayNorm_mean_N2$Bay_mat
methodnames<-c('mean bayNorm')
N2_LIST<-list(N2_meanbay)
names(LABEL_REP)<-colnames(cbind(N1_DAT,N2_DAT,N3_DAT))
BATCH_N2<-LABEL_REP[colnames(N2_DAT)]
q_temp<-BATCH_N2[BATCH_N2!=3]
DATA_list_N2_12<-lapply(N2_LIST,function(x){return(x[,names(q_temp)])})
M_list_N2_12<-M_TEST_FUN(DATA_list_N2_12,grs=table(q_temp),methodnames=methodnames)
T_list_N2_12<-T_TEST_FUN(DATA_list_N2_12,CONDITION=q_temp,methodnames=methodnames)
BAR_M_N2_12<-BATCH_BAR_FUN(M_list_N2_12,methodnames=methodnames)
BAR_T_N2_12<-BATCH_BAR_FUN(T_list_N2_12,methodnames=methodnames)
BAR_M_N2_12
BAR_M_N2_12
BAR_T_N2_12
colSums(bayNorm_mean_N2$Bay_mat)
#N2: 1 2#######
N2_meanbay<-round(bayNorm_mean_N2$Bay_mat)
xx<-rowMeans(N2_meanbay)
yy<-apply(N2_meanbay,1,function(x){length(which(x==0))/length(x)})
plot(xx,yy,log='x')
#N2: 1 2#######
N2_meanbay<-bayNorm_mean_N2$Bay_mat
xx<-rowMeans(N2_meanbay)
yy<-apply(N2_meanbay,1,function(x){length(which(x==0))/length(x)})
plot(xx,yy,log='x')
#N2: 1 2#######
N2_meanbay<-round(bayNorm_mean_N2$Bay_mat)
xx<-rowMeans(N2_meanbay)
yy<-apply(N2_meanbay,1,function(x){length(which(x==0))/length(x)})
plot(xx,yy,log='x')
methodnames<-c('mean bayNorm')
N2_LIST<-list(N2_meanbay)
names(LABEL_REP)<-colnames(cbind(N1_DAT,N2_DAT,N3_DAT))
BATCH_N2<-LABEL_REP[colnames(N2_DAT)]
q_temp<-BATCH_N2[BATCH_N2!=3]
DATA_list_N2_12<-lapply(N2_LIST,function(x){return(x[,names(q_temp)])})
M_list_N2_12<-M_TEST_FUN(DATA_list_N2_12,grs=table(q_temp),methodnames=methodnames)
T_list_N2_12<-T_TEST_FUN(DATA_list_N2_12,CONDITION=q_temp,methodnames=methodnames)
BAR_M_N2_12<-BATCH_BAR_FUN(M_list_N2_12,methodnames=methodnames)
BAR_T_N2_12<-BATCH_BAR_FUN(T_list_N2_12,methodnames=methodnames)
BAR_M_N2_12
BAR_T_N2_12
N2_meanbay<-Bay_2
N2_meanbay<-Bay_2[,,1]
xx<-rowMeans(N2_meanbay)
yy<-apply(N2_meanbay,1,function(x){length(which(x==0))/length(x)})
plot(xx,yy,log='x')
methodnames<-c('mean bayNorm')
N2_LIST<-list(N2_meanbay)
names(LABEL_REP)<-colnames(cbind(N1_DAT,N2_DAT,N3_DAT))
BATCH_N2<-LABEL_REP[colnames(N2_DAT)]
q_temp<-BATCH_N2[BATCH_N2!=3]
DATA_list_N2_12<-lapply(N2_LIST,function(x){return(x[,names(q_temp)])})
M_list_N2_12<-M_TEST_FUN(DATA_list_N2_12,grs=table(q_temp),methodnames=methodnames)
T_list_N2_12<-T_TEST_FUN(DATA_list_N2_12,CONDITION=q_temp,methodnames=methodnames)
BAR_M_N2_12<-BATCH_BAR_FUN(M_list_N2_12,methodnames=methodnames)
BAR_T_N2_12<-BATCH_BAR_FUN(T_list_N2_12,methodnames=methodnames)
BAR_M_N2_12
BAR_T_N2_12
#N2: 1 2#######
N2_meanbay<-bayNorm_mean_N2$Bay_mat
xx<-rowMeans(N2_meanbay)
yy<-apply(N2_meanbay,1,function(x){length(which(x==0))/length(x)})
plot(xx,yy,log='x')
#N2: 1 2#######
N2_meanbay<-bayNorm_mean_N2$Bay_mat
xx<-rowMeans(N2_meanbay)
yy<-apply(N2_meanbay,1,function(x){length(which(x==0))/length(x)})
plot(xx,yy,log='x')
plot(rowMeans(bayNorm_mean_N2$Bay_mat),rowMeans(Bay_2[,,1]))
abline(0,1)
plot(rowMeans(bayNorm_mean_N2$Bay_mat),rowMeans(Bay_2))
abline(0,1)
all.equal(rowMeans(bayNorm_mean_N2$Bay_mat),rowMeans(Bay_2))
cor(rowMeans(bayNorm_mean_N2$Bay_mat),rowMeans(Bay_2))
plot(rowMeans(bayNorm_mean_N2$Bay_mat[,LABEL_REP[colnames(N2_DAT)]==1]),rowMeans(Bay_2[,LABEL_REP[colnames(N2_DAT)]==1,]))
abline(0,1)
plot(rowMeans(bayNorm_mean_N2$Bay_mat[,LABEL_REP[colnames(N2_DAT)]==2]),rowMeans(Bay_2[,LABEL_REP[colnames(N2_DAT)]==2,]))
abline(0,1)
plot(rowMeans(bayNorm_mean_N2$Bay_mat[,LABEL_REP[colnames(N2_DAT)]==3]),rowMeans(Bay_2[,LABEL_REP[colnames(N2_DAT)]==3,]))
abline(0,1)
plot(bayNorm_mean_N2$Bay_mat[,1],Bay_2[,1,1])
abline(0,1)
plot(bayNorm_mean_N2$Bay_mat[,1],Bay_2[,1,2])
abline(0,1)
plot(bayNorm_mean_N2$Bay_mat[,2],Bay_2[,2,1])
abline(0,1)
plot(density(bayNorm_mean_N2$Bay_mat[1,],bw=bw))
bw=10
plot(density(bayNorm_mean_N2$Bay_mat[1,],bw=bw))
lines(density(Bay_2[1,,],bw=bw),col=3)
lines(density(Bay_2[1,,1],bw=bw),col=3)
plot(density(bayNorm_mean_N2$Bay_mat[1,],bw=bw))
lines(density(Bay_2[1,,1],bw=bw),col=3)
plot(density(bayNorm_mean_N2$Bay_mat[15,],bw=bw))
lines(density(Bay_2[15,,1],bw=bw),col=3)
plot(density(bayNorm_mean_N2$Bay_mat[150,],bw=bw))
lines(density(Bay_2[150,,1],bw=bw),col=3)
lines(density(Bay_2[150,,],bw=bw),col=3)
plot(density(bayNorm_mean_N2$Bay_mat[1504,],bw=bw))
lines(density(Bay_2[1504,,],bw=bw),col=3)
ks.test(bayNorm_mean_N2$Bay_mat[1504,],Bay_2[1504,,])
gene<-15
ks.test(bayNorm_mean_N2$Bay_mat[gene,],Bay_2[gene,,])
gene<-1
ks.test(bayNorm_mean_N2$Bay_mat[gene,],Bay_2[gene,,])
gene<-17
ks.test(bayNorm_mean_N2$Bay_mat[gene,],Bay_2[gene,,])
gene<-170
ks.test(bayNorm_mean_N2$Bay_mat[gene,],Bay_2[gene,,])
ks.test(bayNorm_mean_N2$Bay_mat[gene,],Bay_2[gene,,1])
ks.test(bayNorm_mean_N2$Bay_mat[gene,],Bay_2[gene,,2])
gene<-175
ks.test(bayNorm_mean_N2$Bay_mat[gene,],Bay_2[gene,,])
gene<-115
ks.test(bayNorm_mean_N2$Bay_mat[gene,],Bay_2[gene,,])
gene<-8400
ks.test(bayNorm_mean_N2$Bay_mat[gene,],Bay_2[gene,,])
load("E:/RNAseqProject/NEWPROJECT_PAPERS/Validation of noise models for single-cell transcriptomics/SAVER/SAVER_SC_serum_1overBETA.RData")
ks.test(SAVER_SC_serum_array[gene,,],SAVER_SC_serum$estimate[gene,])
gene<-18
ks.test(SAVER_SC_serum_array[gene,,],SAVER_SC_serum$estimate[gene,])
gene<-37
ks.test(SAVER_SC_serum_array[gene,,],SAVER_SC_serum$estimate[gene,])
SAVER_SC_serum_array[gene,,]
gene<-370
ks.test(SAVER_SC_serum_array[gene,,],SAVER_SC_serum$estimate[gene,])
plot(rowMeans(SAVER_SC_serum_array),rowMeans(SAVER_SC_serum$estimate)
plot(rowMeans(SAVER_SC_serum_array),rowMeans(SAVER_SC_serum$estimate)
)
plot(rowMeans(SAVER_SC_serum_array),rowMeans(SAVER_SC_serum$estimate))
abline(0,1)
plot(rowSums(SAVER_SC_serum_array),rowSums(SAVER_SC_serum$estimate))
abline(0,1)
plot(rowSums(SAVER_SC_serum_array[,,1]),rowSums(SAVER_SC_serum$estimate))
abline(0,1)
plot(rowSums(SAVER_SC_serum_array[,,2]),rowSums(SAVER_SC_serum$estimate))
abline(0,1)
installed.packages('roxygen2')
installed.packages('roxygen2')
library(roxygen2)
installed.packages('roxygen2')
installed.packages('roxygen2')
installed.packages("roxygen2")
install.packages("roxygen2")
install.packages('testthat')
library(rmarkdown)
install.packages('rmarkdown')
source("https://bioconductor.org/biocLite.R")
biocLite("BiocStyle")
library(BiocCheck)
source("https://bioconductor.org/biocLite.R")
biocLite("BiocCheck")
library(BiocCheck)
BiocCheck("E:/RNAseqProject/bayNorm_dev/bayNorm")
